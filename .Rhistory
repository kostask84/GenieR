devtools::document()
devtools::document()
?timesTwo
timesTwo(10)
devtools::document()
timesTwo(10)
library(genieR)
timesTwo(10)
library(genieR)
?timesTwo
timesTwo(2)
?Geniefit
library(ape)
t1=rcoal(20)
Geniefit(t1,Model="expo",start=c(100,.1,.1),upper=Inf,lower=0)
devtools::document()
timesTwo(2)
genieR_timesTwo(2)
devtools::use_rcpp()
devtools::document()
Rcpp::sourceCpp('src/expo.cpp')
library(inline)
Rcpp::sourceCpp('src/expo.cpp')
devtools::document()
nreps <- 10000
set.seed(1)
theta <- rep(0,nreps)
ll <- rep(0,nreps)
for(i in 1:nreps){
tr <- rcoal(10)
ta <- att(tr)
f <- bobyqa(c(1),negllc,lower=0,upper=Inf,t=ta$t,A=ta$A,control=list(iprint=0))
theta[i] <- f$par
ll[i] <- -f$fval
}
```{r}
library(ape)
library(minqa)
library(Rcpp)
library(inline)
branching.sampling.times <- function(phy){
phy = new2old.phylo(phy)
if (class(phy) != "phylo")
stop("object \"phy\" is not of class \"phylo\"")
tmp <- as.numeric(phy$edge)
nb.tip <- max(tmp)
nb.node <- -min(tmp)
xx <- as.numeric(rep(NA, nb.tip + nb.node))
names(xx) <- as.character(c(-(1:nb.node), 1:nb.tip))
xx["-1"] <- 0
for (i in 2:length(xx)) {
nod <- names(xx[i])
ind <- which(phy$edge[, 2] == nod)
base <- phy$edge[ind, 1]
xx[i] <- xx[base] + phy$edge.length[ind]
}
depth <- max(xx)
branching.sampling.times <- depth - xx
return(branching.sampling.times)
}
att <- function(phy,eps=1e-6){
b.s.times = branching.sampling.times(phy)
int.ind = which(as.numeric(names(b.s.times)) < 0)
tip.ind = which(as.numeric(names(b.s.times)) > 0)
num.tips = length(tip.ind)
num.coal.events = length(int.ind)
sampl.suf.stat = rep(NA, num.coal.events)
coal.interval = rep(NA, num.coal.events)
coal.lineages = rep(NA, num.coal.events)
sorted.coal.times = sort(b.s.times[int.ind])
names(sorted.coal.times) = NULL
sampling.times = sort((b.s.times[tip.ind]))
for (i in 2:length(sampling.times)){
if ((sampling.times[i]-sampling.times[i-1])<eps){
sampling.times[i]<-sampling.times[i-1]}
}
unique.sampling.times<-unique(sampling.times)
sampled.lineages = NULL
for (sample.time in unique.sampling.times){
sampled.lineages = c(sampled.lineages,
sum(sampling.times == sample.time))
}
if(sum(sorted.coal.times %in% unique.sampling.times)>0){
stop("Simultaneous sample and coalescence time")
}
all.times <- sort(unique(c(unique.sampling.times,sorted.coal.times)))
# Check that first time is sampling
if(!(all.times[1] %in% unique.sampling.times)){
stop("Samples must be first (in reverse time)")
}
A <- rep(0,length(all.times))
lastA <- 0
for(i in 1:length(all.times)){
is.sample <- match(all.times[i],unique.sampling.times)
if(!is.na(is.sample)){
ss <- sampled.lineages[is.sample]
A[i] <- lastA + ss
}else{
A[i] <- lastA - 1
}
lastA <- A[i]
}
data.frame(t=all.times,A=A)
}
nreps <- 10000
set.seed(1)
theta <- rep(0,nreps)
ll <- rep(0,nreps)
for(i in 1:nreps){
tr <- rcoal(10)
ta <- att(tr)
f <- bobyqa(c(1),negllc,lower=0,upper=Inf,t=ta$t,A=ta$A,control=list(iprint=0))
theta[i] <- f$par
ll[i] <- -f$fval
}
ll
negllc(t=ta$t,A=ta$A)
negllc(c(1),t=ta$t,A=ta$A)
library(genieR)
negllc(c(1),t=ta$t,A=ta$A)
devtools::document()
negllc(c(1),t=ta$t,A=ta$A)
library(inline)
negllc(c(1),t=ta$t,A=ta$A)
library(genieR)
negllc(c(1),t=ta$t,A=ta$A)
devtools::document()
negllc(c(1),t=ta$t,A=ta$A)
devtools::document()
negllc(1,d,3)
?geniefit
library(ape)
t1=rcoal(20)
ta=att(t1)
att <- function(phy,eps=1e-6){
b.s.times = branching.sampling.times(phy)
int.ind = which(as.numeric(names(b.s.times)) < 0)
tip.ind = which(as.numeric(names(b.s.times)) > 0)
num.tips = length(tip.ind)
num.coal.events = length(int.ind)
sampl.suf.stat = rep(NA, num.coal.events)
coal.interval = rep(NA, num.coal.events)
coal.lineages = rep(NA, num.coal.events)
sorted.coal.times = sort(b.s.times[int.ind])
names(sorted.coal.times) = NULL
sampling.times = sort((b.s.times[tip.ind]))
for (i in 2:length(sampling.times)){
if ((sampling.times[i]-sampling.times[i-1])<eps){
sampling.times[i]<-sampling.times[i-1]}
}
unique.sampling.times<-unique(sampling.times)
sampled.lineages = NULL
for (sample.time in unique.sampling.times){
sampled.lineages = c(sampled.lineages,
sum(sampling.times == sample.time))
}
if(sum(sorted.coal.times %in% unique.sampling.times)>0){
stop("Simultaneous sample and coalescence time")
}
all.times <- sort(unique(c(unique.sampling.times,sorted.coal.times)))
# Check that first time is sampling
if(!(all.times[1] %in% unique.sampling.times)){
stop("Samples must be first (in reverse time)")
}
A <- rep(0,length(all.times))
lastA <- 0
for(i in 1:length(all.times)){
is.sample <- match(all.times[i],unique.sampling.times)
if(!is.na(is.sample)){
ss <- sampled.lineages[is.sample]
A[i] <- lastA + ss
}else{
A[i] <- lastA - 1
}
lastA <- A[i]
}
data.frame(t=all.times,A=A)
}
ta=att(t1)
ta
negllc(1,ta$t,ta$A)
library(genieR)
negllc(1,ta$t,ta$A)
att <- function(phy,eps=1e-6){
b.s.times = branching.sampling.times(phy)
int.ind = which(as.numeric(names(b.s.times)) < 0)
tip.ind = which(as.numeric(names(b.s.times)) > 0)
num.tips = length(tip.ind)
num.coal.events = length(int.ind)
sampl.suf.stat = rep(NA, num.coal.events)
coal.interval = rep(NA, num.coal.events)
coal.lineages = rep(NA, num.coal.events)
sorted.coal.times = sort(b.s.times[int.ind])
names(sorted.coal.times) = NULL
sampling.times = sort((b.s.times[tip.ind]))
for (i in 2:length(sampling.times)){
if ((sampling.times[i]-sampling.times[i-1])<eps){
sampling.times[i]<-sampling.times[i-1]}
}
unique.sampling.times<-unique(sampling.times)
sampled.lineages = NULL
for (sample.time in unique.sampling.times){
sampled.lineages = c(sampled.lineages,
sum(sampling.times == sample.time))
}
if(sum(sorted.coal.times %in% unique.sampling.times)>0){
stop("Simultaneous sample and coalescence time")
}
all.times <- sort(unique(c(unique.sampling.times,sorted.coal.times)))
# Check that first time is sampling
if(!(all.times[1] %in% unique.sampling.times)){
stop("Samples must be first (in reverse time)")
}
A <- rep(0,length(all.times))
lastA <- 0
for(i in 1:length(all.times)){
is.sample <- match(all.times[i],unique.sampling.times)
if(!is.na(is.sample)){
ss <- sampled.lineages[is.sample]
A[i] <- lastA + ss
}else{
A[i] <- lastA - 1
}
lastA <- A[i]
}
data.frame(t=all.times,A=A)
}
devtools::document()
negllc(1,ta$t,ta$A)
heterochronous.gp.stat(t1)
Rcpp::sourceCpp('src/expo.cpp')
negllc(1,ta$t,ta$A)
library(ape)
t1=rcoal(20)
Geniefit(t1,Model="expo",start=c(100,.1,.1),upper=Inf,lower=0)
document()
devtools::document()
library(inline)
heterochronous.gp.stat(t1)
heterochronous.gp.stat(t1)[[1]]
A=c(0,heterochronous.gp.stat(t1)[[1]])
t=c(0,heterochronous.gp.stat(t1)[[1]])
A=20:1
negllc()
negllc(1,t,A)
negllc(1,t,A)
devtools::document()
negllc(1,t,A)
t
a
A
negllc
library(genieR)
negllc(1,t,A)
library(genieR)
negllc
devtools::document()
library(genieR)
devtools::document()
devtools::document()
?negllc
negllc
devtools::document()
cumsum_bounded(c(1, -2, 3), low = 2, high = 10)
library(genieR)
cumsum_bounded(c(1, -2, 3), low = 2, high = 10)
library(genieR)
devtools::document()
cumsum_bounded(c(1, -2, 3), low = 2, high = 10)
library(genieR)
cumsum_bounded(c(1, -2, 3), low = 2, high = 10)
genieR::cumsum_bounded(c(1,-2,3),low=2,high=10)
devtools::document()
cumsum_bounded(c(1, -2, 3), low = 2, high = 10)
genieR::cumsum_bounded(c(1,-2,3),low=2,high=10)
devtools::load_all()
cumsum_bounded(c(1,-2,3),low=1,high=10)
genieR::cumsum_bounded(c(1,-2,3),low=1,high=100)
devtools::document()
cumsum_bounded(c(1,-2,3),low=1,high=10)
?cumsum_bounded
library(devtools)
document()
library(genieR)
cumsum_bounded(c(1,-2,3),low=1,high=10)
document()
cumsum_bounded(c(1,-2,3),low=1,high=10)
document()
cumsum_bounded(c(1,-2,3),low=1,high=10)
library(genieR)
library(genieR)
document()
document()
document()
document()
document()
load_all()
cumsum_bounded(c(1,-2,3),low=1,high=10)
t1
library(ape)
t1=rcoal(20)
att <- function(phy,eps=1e-6){
b.s.times = branching.sampling.times(phy)
int.ind = which(as.numeric(names(b.s.times)) < 0)
tip.ind = which(as.numeric(names(b.s.times)) > 0)
num.tips = length(tip.ind)
num.coal.events = length(int.ind)
sampl.suf.stat = rep(NA, num.coal.events)
coal.interval = rep(NA, num.coal.events)
coal.lineages = rep(NA, num.coal.events)
sorted.coal.times = sort(b.s.times[int.ind])
names(sorted.coal.times) = NULL
sampling.times = sort((b.s.times[tip.ind]))
for (i in 2:length(sampling.times)){
if ((sampling.times[i]-sampling.times[i-1])<eps){
sampling.times[i]<-sampling.times[i-1]}
}
unique.sampling.times<-unique(sampling.times)
sampled.lineages = NULL
for (sample.time in unique.sampling.times){
sampled.lineages = c(sampled.lineages,
sum(sampling.times == sample.time))
}
if(sum(sorted.coal.times %in% unique.sampling.times)>0){
stop("Simultaneous sample and coalescence time")
}
all.times <- sort(unique(c(unique.sampling.times,sorted.coal.times)))
# Check that first time is sampling
if(!(all.times[1] %in% unique.sampling.times)){
stop("Samples must be first (in reverse time)")
}
A <- rep(0,length(all.times))
lastA <- 0
for(i in 1:length(all.times)){
is.sample <- match(all.times[i],unique.sampling.times)
if(!is.na(is.sample)){
ss <- sampled.lineages[is.sample]
A[i] <- lastA + ss
}else{
A[i] <- lastA - 1
}
lastA <- A[i]
}
data.frame(t=all.times,A=A)
}
att(t1)
heterochronous.gp.stat(t1)
load("~/genieR/data/vill1_lsd.rda")
heterochronous.gp.stat(vill1_lsd)
att(vill1_lsd)
cppFunction('
double negllc_const(double N0, NumericVector t, NumericVector A){
// Initialization
int nint = t.size()-1;
double ll = 0.0;
double dt, intval;
int a, ch;
// Main loop
for(int i=0;i<nint;i++){
dt=t[i+1]-t[i];
a=A[i];
ch=a*(a-1)/2;
intval=dt/N0;
if(A[i+1]==(A[i]-1)){
ll = ll + log(ch)-log(N0)-ch*intval;
}else{
ll = ll -ch*intval;
}
}
return(-ll);
}'
)
library(Rcpp)
library(inline)
cppFunction('
double negllc_const(double N0, NumericVector t, NumericVector A){
// Initialization
int nint = t.size()-1;
double ll = 0.0;
double dt, intval;
int a, ch;
// Main loop
for(int i=0;i<nint;i++){
dt=t[i+1]-t[i];
a=A[i];
ch=a*(a-1)/2;
intval=dt/N0;
if(A[i+1]==(A[i]-1)){
ll = ll + log(ch)-log(N0)-ch*intval;
}else{
ll = ll -ch*intval;
}
}
return(-ll);
}'
)
att
att(t1)
xx=att(t1)
negllc_const(1,xx$t,xx$A)
negllc_const(c(1,2),xx$t,xx$A)
heterochronous.gp.stat(ta)
heterochronous.gp.stat(t1)
att(vill1_lsd)
vill1_chronos<- read.tree("V:/pangetrees/chronos/Vill1_chronos.tre",text = NULL, tree.names = NULL, skip = 0,
comment.char = "#", keep.multi = FALSE)
att(vill1_chronos)
att(vill1_lsd)
att(vill1_chronos)
plot(vill1_chronos)
plot(vill1_lsd)
vil=att(vill1_chronos)
vil$A
heterochronous.gp.stat(vill1_chronos)
phy=vill1_chronos
#####wash the data from the tree file#########
phy.times=heterochronous.gp.stat (phy)
##################times frame given the coalesent events#############
n=length(phy.times$coal.times)
coaltimes.pop=matrix(0,nrow=n,ncol=2)
coaltimes.pop[,1]=phy.times$coal.times
coaltimes.pop[,2]=-1
#################times frame given the sampled events################
xn=length(phy.times$sample.times)
samptimes.pop=matrix(0,nrow=xn,ncol=2)
samptimes.pop[,1]=phy.times$sample.times
samptimes.pop[,2]=phy.times$sampled.lineages
######sorted time and index matrix#####
times.pop=rbind(samptimes.pop,coaltimes.pop)
sort.times.pop=times.pop
sort.times.pop[,1]=times.pop[,1][order(times.pop[,1])]
sort.times.pop[,2]=times.pop[,2][order(times.pop[,1])]
#####population at diffrent times###
pop.times=cumsum(sort.times.pop[,2])
#####type of time, 0 denoting sampling event and 1 denoting coalesent event####
type=c(rep(0,xn),rep(1,n))
sort.type=type[order(times.pop[,1])]
ntotal=length(sort.type)
phy.times
pop.times
pop.times-vil$A
all(pop.times==vil$A)
times.pop
times.pop[,1]
vil$t
all(times.pop[,1]==vil$t)
times.pop[,1]-vil$t
sort.times.pop
sort.times.pop[,1]
sort.times.pop[,1]==vil$t
all(sort.times.pop[,1]==vil$t)
devtools::document()
devtools::document()
?att
devtools::document()
devtools::document()
load_all()
?negllc_const
library(ape)
t1=rcoal(20)
x=att(t1)
negllc_constant(1, x$t, x$A)
library(genieR)
library(ape)
t1=rcoal(20)
x=att(t1)
negllc_constant(1, x$t, x$A)
document()
library(ape)
t1=rcoal(20)
x=att(t1)
negllc_constant(1, x$t, x$A)
document()
library(ape)
t1=rcoal(20)
x=att(t1)
negllc_constant(1, x$t, x$A)
library(genieR)
library(ape)
t1=rcoal(20)
x=att(t1)
negllc_constant(1, x$t, x$A)
devtools::load_all(".")
document()
negllc_constant(1, x$t, x$A)
cumsum_bounded(1,1,1)
document()
document()
document()
negllc_constant(1, x$t, x$A)
negllc_const(1, x$t, x$A)
x
negllc_const(100, x$t, x$A)
library(genieR)
?nellc_const
document()
?nellc_const
?negllc_const
library(ape)
t1=rcoal(20)
x=att(t1)
negllc_const(1, x$t, x$A)
?cumsum_bounded
cumsum_bounded(1,1,1)
library(genieR)
library(genieR)
cumsum_bounded(1,1,1)
library(ape)
t1=rcoal(20)
x=att(t1)
negllc_const(1, x$t, x$A)
negllc_const(100, x$t, x$A)
