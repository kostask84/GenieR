devtools::document()
cumsum_bounded(c(1,-2,3),low=1,high=10)
?cumsum_bounded
library(devtools)
document()
library(genieR)
cumsum_bounded(c(1,-2,3),low=1,high=10)
document()
cumsum_bounded(c(1,-2,3),low=1,high=10)
document()
cumsum_bounded(c(1,-2,3),low=1,high=10)
library(genieR)
library(genieR)
document()
document()
document()
document()
document()
load_all()
cumsum_bounded(c(1,-2,3),low=1,high=10)
t1
library(ape)
t1=rcoal(20)
att <- function(phy,eps=1e-6){
b.s.times = branching.sampling.times(phy)
int.ind = which(as.numeric(names(b.s.times)) < 0)
tip.ind = which(as.numeric(names(b.s.times)) > 0)
num.tips = length(tip.ind)
num.coal.events = length(int.ind)
sampl.suf.stat = rep(NA, num.coal.events)
coal.interval = rep(NA, num.coal.events)
coal.lineages = rep(NA, num.coal.events)
sorted.coal.times = sort(b.s.times[int.ind])
names(sorted.coal.times) = NULL
sampling.times = sort((b.s.times[tip.ind]))
for (i in 2:length(sampling.times)){
if ((sampling.times[i]-sampling.times[i-1])<eps){
sampling.times[i]<-sampling.times[i-1]}
}
unique.sampling.times<-unique(sampling.times)
sampled.lineages = NULL
for (sample.time in unique.sampling.times){
sampled.lineages = c(sampled.lineages,
sum(sampling.times == sample.time))
}
if(sum(sorted.coal.times %in% unique.sampling.times)>0){
stop("Simultaneous sample and coalescence time")
}
all.times <- sort(unique(c(unique.sampling.times,sorted.coal.times)))
# Check that first time is sampling
if(!(all.times[1] %in% unique.sampling.times)){
stop("Samples must be first (in reverse time)")
}
A <- rep(0,length(all.times))
lastA <- 0
for(i in 1:length(all.times)){
is.sample <- match(all.times[i],unique.sampling.times)
if(!is.na(is.sample)){
ss <- sampled.lineages[is.sample]
A[i] <- lastA + ss
}else{
A[i] <- lastA - 1
}
lastA <- A[i]
}
data.frame(t=all.times,A=A)
}
att(t1)
heterochronous.gp.stat(t1)
load("~/genieR/data/vill1_lsd.rda")
heterochronous.gp.stat(vill1_lsd)
att(vill1_lsd)
cppFunction('
double negllc_const(double N0, NumericVector t, NumericVector A){
// Initialization
int nint = t.size()-1;
double ll = 0.0;
double dt, intval;
int a, ch;
// Main loop
for(int i=0;i<nint;i++){
dt=t[i+1]-t[i];
a=A[i];
ch=a*(a-1)/2;
intval=dt/N0;
if(A[i+1]==(A[i]-1)){
ll = ll + log(ch)-log(N0)-ch*intval;
}else{
ll = ll -ch*intval;
}
}
return(-ll);
}'
)
library(Rcpp)
library(inline)
cppFunction('
double negllc_const(double N0, NumericVector t, NumericVector A){
// Initialization
int nint = t.size()-1;
double ll = 0.0;
double dt, intval;
int a, ch;
// Main loop
for(int i=0;i<nint;i++){
dt=t[i+1]-t[i];
a=A[i];
ch=a*(a-1)/2;
intval=dt/N0;
if(A[i+1]==(A[i]-1)){
ll = ll + log(ch)-log(N0)-ch*intval;
}else{
ll = ll -ch*intval;
}
}
return(-ll);
}'
)
att
att(t1)
xx=att(t1)
negllc_const(1,xx$t,xx$A)
negllc_const(c(1,2),xx$t,xx$A)
heterochronous.gp.stat(ta)
heterochronous.gp.stat(t1)
att(vill1_lsd)
vill1_chronos<- read.tree("V:/pangetrees/chronos/Vill1_chronos.tre",text = NULL, tree.names = NULL, skip = 0,
comment.char = "#", keep.multi = FALSE)
att(vill1_chronos)
att(vill1_lsd)
att(vill1_chronos)
plot(vill1_chronos)
plot(vill1_lsd)
vil=att(vill1_chronos)
vil$A
heterochronous.gp.stat(vill1_chronos)
phy=vill1_chronos
#####wash the data from the tree file#########
phy.times=heterochronous.gp.stat (phy)
##################times frame given the coalesent events#############
n=length(phy.times$coal.times)
coaltimes.pop=matrix(0,nrow=n,ncol=2)
coaltimes.pop[,1]=phy.times$coal.times
coaltimes.pop[,2]=-1
#################times frame given the sampled events################
xn=length(phy.times$sample.times)
samptimes.pop=matrix(0,nrow=xn,ncol=2)
samptimes.pop[,1]=phy.times$sample.times
samptimes.pop[,2]=phy.times$sampled.lineages
######sorted time and index matrix#####
times.pop=rbind(samptimes.pop,coaltimes.pop)
sort.times.pop=times.pop
sort.times.pop[,1]=times.pop[,1][order(times.pop[,1])]
sort.times.pop[,2]=times.pop[,2][order(times.pop[,1])]
#####population at diffrent times###
pop.times=cumsum(sort.times.pop[,2])
#####type of time, 0 denoting sampling event and 1 denoting coalesent event####
type=c(rep(0,xn),rep(1,n))
sort.type=type[order(times.pop[,1])]
ntotal=length(sort.type)
phy.times
pop.times
pop.times-vil$A
all(pop.times==vil$A)
times.pop
times.pop[,1]
vil$t
all(times.pop[,1]==vil$t)
times.pop[,1]-vil$t
sort.times.pop
sort.times.pop[,1]
sort.times.pop[,1]==vil$t
all(sort.times.pop[,1]==vil$t)
devtools::document()
devtools::document()
?att
devtools::document()
devtools::document()
load_all()
?negllc_const
library(ape)
t1=rcoal(20)
x=att(t1)
negllc_constant(1, x$t, x$A)
library(genieR)
library(ape)
t1=rcoal(20)
x=att(t1)
negllc_constant(1, x$t, x$A)
document()
library(ape)
t1=rcoal(20)
x=att(t1)
negllc_constant(1, x$t, x$A)
document()
library(ape)
t1=rcoal(20)
x=att(t1)
negllc_constant(1, x$t, x$A)
library(genieR)
library(ape)
t1=rcoal(20)
x=att(t1)
negllc_constant(1, x$t, x$A)
devtools::load_all(".")
document()
negllc_constant(1, x$t, x$A)
cumsum_bounded(1,1,1)
document()
document()
document()
negllc_constant(1, x$t, x$A)
negllc_const(1, x$t, x$A)
x
negllc_const(100, x$t, x$A)
library(genieR)
?nellc_const
document()
?nellc_const
?negllc_const
library(ape)
t1=rcoal(20)
x=att(t1)
negllc_const(1, x$t, x$A)
?cumsum_bounded
cumsum_bounded(1,1,1)
library(genieR)
library(genieR)
cumsum_bounded(1,1,1)
library(ape)
t1=rcoal(20)
x=att(t1)
negllc_const(1, x$t, x$A)
negllc_const(100, x$t, x$A)
library(genieR)
cumsumbound(1,1,1)
cumsum_bounded(1,1,1)
?negllc_const
library(ape)
t1=rcoal(20)
x=att(t1)
x
negllc_const(1, x$t, x$A)
devtools::document()
?att
library(ape)
t1=rcoal(20)
att(t1)
class(att(t1))
x=att(t1)
dim(x)
dim(x)[2]==2
branching.sampling.times(t1)
x=branching.sampling.times(t1)
class(t)
class(x)
length(x)
class(x)=="numeric"
?coalgen_hetero
sample1<-cbind(c(9,1,2,1),c(0,.008,.03,.1))
trajectory<-function(x)  exp(10*x)
example_hetero<-coalgen_hetero(sample1, trajectory)
View(example_hetero)
example_hetero
class(example_hetero)
length(example_hetero)
?coalgeniso
?coalgen_iso
sample<-c(100,0)
trajectory<-function(x)  exp(10*x)
example_iso<-coalgen_iso(sample, trajectory)
example_is0
example_iso
example_hetero
sample1<-cbind(c(9,1,2,1),c(0,.008,.03,.1))
trajectory<-function(x) 100
example_hetero<-coalgen_hetero(sample1, trajectory)
expect_error(coalgen_hetero(sample1, trajectory))
expect_error(coalgen_hetero(sample1[,1], Vectorize(trajectory)))
example_hetero<-coalgen_hetero(sample1, trajectory)
example_hetero<-coalgen_hetero(sample1, trajectory)
example_hetero<-coalgen_hetero(sample1, Vectorize(trajectory))
sample1<-cbind(c(9,1,2,1),c(0,.008,.03,.1))
trajectory<-function(x) exp(10*x)
example_hetero<-coalgen_hetero(sample1, trajectory)
class(example_hetero)=="list" && length(example_hetero)=2
class(example_hetero)=="list" &&
]
class(example_hetero)=="list"
class(example_hetero)=="list" & length(example_hetero)=2
class(example_hetero)=="list"
length(example_hetero)=2
class(example_hetero)=="list" & length(example_hetero)==2
length(example_hetero)
?Geniefit
library(ape)
library(testthat)
devtools::document()
devtools::document()
library(ape)
install.packages("ape")
library(ape)
devtools::document()
install.packages("testthat")
devtools::document()
?Geniefit
library(ape)
t1=rcoal(20)
Geniefit(t1,Model="expo",start=c(100,.1),upper=Inf,lower=0)
Geniefit(t1,Model="expo",start=c(100,.1),upper=Inf,lower=0,Rcpp=T)
library(dfoptim)
Geniefit(t1,Model="expo",start=c(100,.1),upper=Inf,lower=0,Rcpp=T)
dim(Geniefit(t1,Model="expo",start=c(100,.1),upper=Inf,lower=0,Rcpp=T))
dim(Geniefit(t1,Model="expo",start=c(100,.1),upper=Inf,lower=0))
length(Geniefit(t1,Model="expo",start=c(100,.1),upper=Inf,lower=0))
Geniefit(t1,Model="expan",start=c(100,.1,.1),upper=Inf,lower=0,Rcpp=T)
library(Rcpp)
fit2=Geniefit(village,Model="log",start=c(100,.1,.1),upper=Inf,lower=0,Rcpp=T)
require(devtools)
install_version("yaml", version = "2.1.14", repos = "http://cran.us.r-project.org")
fit2=Geniefit(village,Model="log",start=c(100,.1,.1),upper=Inf,lower=0,Rcpp=T)
?negllc_const
library(ape)
t1=rcoal(20)
x=att(t1)
negllc_const(1, x$t, x$A)
Rcpp::sourceCpp('src/negllc_const.cpp')
library(ape)
t1=rcoal(20)
x=att(t1)
negllc_const(1, x$t, x$A)
library(Rcpp)
Rcpp::sourceCpp('src/negllc_const.cpp')
library(dfoptim)
library(dfoptim)
fit2=Geniefit(village,Model="log",start=c(100,.1,.1),upper=Inf,lower=0,Rcpp=T)
fit2=Geniefit(village,Model="log",start=c(100,.1,.1),upper=Inf,lower=0,Rcpp=T)
library(dfoptim)
fit2=Geniefit(village,Model="log",start=c(100,.1,.1),upper=Inf,lower=0,Rcpp=T)
fit2
library(genieR)
library(dfoptim)
fit2=Geniefit(village,Model="log",start=c(100,.1,.1),upper=Inf,lower=0,Rcpp=T)
fit2
fit2=Geniefit(village,Model="log",start=c(100,.1,.1),upper=Inf,lower=0,Rcpp=T)
fit2=Geniefit(village,Model="log",start=c(100,.1,.1),upper=Inf,lower=0,Rcpp=T)
devtools::add_path()
devtools::add_path(
_
devtools::document()
fit2=Geniefit(village,Model="log",start=c(100,.1,.1),upper=Inf,lower=0,Rcpp=T)
fit2=Geniefit(village,Model="log",start=c(100,.1,.1),upper=Inf,lower=0,Rcpp=T)
library(ape)
t1=rcoal(20)
Geniefit(t1,Model="expo",start=c(100,.1),upper=Inf,lower=0)
Geniefit(t1,Model="expo",start=c(100,.1),upper=Inf,lower=0,Rcpp=T)
library(ape)
t1=rcoal(20)
Geniefit(t1,Model="expo",start=c(100,.1),upper=Inf,lower=0)
Geniefit(t1,Model="expo",start=c(100,.1),upper=Inf,lower=0,Rcpp=T)
library(genieR)
library(ape)
t1=rcoal(20)
Geniefit(t1,Model="expo",start=c(100,.1),upper=Inf,lower=0)
Geniefit(t1,Model="expo",start=c(100,.1),upper=Inf,lower=0,Rcpp=T)
devtools::load_all(".")
d
library(ape)
t1=rcoal(20)
Geniefit(t1,Model="expo",start=c(100,.1),upper=Inf,lower=0)
Geniefit(t1,Model="expo",start=c(100,.1),upper=Inf,lower=0,Rcpp=T)
library(genieR)
devtools::document()
library(ape)
t1=rcoal(20)
Geniefit(t1,Model="expo",start=c(100,.1),upper=Inf,lower=0)
Geniefit(t1,Model="expo",start=c(100,.1),upper=Inf,lower=0,Rcpp=T)
f
library(genieR)
library(genieR)
devtools::document()
library(genieR)
library(genieR)
library(ape)
t1=rcoal(20)
Geniefit(t1,Model="expo",start=c(100,.1),upper=Inf,lower=0)
Geniefit(t1,Model="expo",start=c(100,.1),upper=Inf,lower=0,Rcpp=T)
devtools::load_all(".")
library(ape)
t1=rcoal(20)
Geniefit(t1,Model="expo",start=c(100,.1),upper=Inf,lower=0)
Geniefit(t1,Model="expo",start=c(100,.1),upper=Inf,lower=0,Rcpp=T)
heterochronous.gp.stat
data("village")
heterochronous.gp.stat(village)
?heterochronous.gp.stat
library(ape)
data(village)
plot(village,show.tip.label = F,edge.color = sample(colors(), length(village$edge)/2,replace=T))
title("A phylogenetic tree with random colors")
x=att(village)
head(x)
tail(x)
heterochronous.gp.stat(village)
library(dfoptim)
fit2=Geniefit(village,Model="log",start=c(100,.1,.1),upper=Inf,lower=0,Rcpp=T)
library(dfoptim)
fit2=Geniefit(village,Model="log",start=c(10,.1,.1),upper=Inf,lower=0,Rcpp=T)
fit2
fit1=Geniefit(village,Model="expo",start=c(100,.1),upper=Inf,lower=0)
fit1
fit1=Geniefit(village,Model="expo",start=c(10,.1),upper=Inf,lower=0)
fit1
fit3=Geniefit(village,Model="log",start=c(100,.1,.1),upper=Inf,lower=0,MCMC=T)
fit3
?heterochronous.gp.stat
library(ape)
t1=rcoal(20)
heterochronous.gp.stat(t1)
y=heterochronous.gp.stat(village)
library(dfoptim)
fit2=Geniefit(village,Model="log",start=c(10,.1,.1),upper=Inf,lower=0,Rcpp=T)
fit2
devtools::document()
library(genieR)
length(fit2)
class(Geniefit(village,Model="log",start=c(10,.1,.1),upper=Inf,lower=0,Rcpp=T))
length(Geniefit(village,Model="log",start=c(10,.1,.1),upper=Inf,lower=0,Rcpp=T))
devtools::test()
x=att(t1)
class(t1)
sample1<-cbind(c(9,1,2,1),c(0,.008,.03,.1))
trajectory<-function(x) 100
example_hetero<-coalgen_hetero(sample1, trajectory)
trajectory()
trajectory
coalgen_hetero(sample1, trajectory)
coalgen_hetero(sample1, Vectorize(trajectory))
sample1<-cbind(c(9,1,2,1),c(0,.008,.03,.1))
trajectory<-function(x) exp(10*x)
example_hetero<-coalgen_hetero(sample1, trajectory)
?coalgen_iso
devtools::test
devtools::test()
library(ape)
t1=rcoal(20)
x=att(t1)
class(x)
x
class(x)=="data.frame" && length(x)==2.
devtools::test()
class(Geniefit(t1,Model="const",start=c(100,.1),upper=Inf,lower=0))=="list"
devtools::test()
class(Geniefit(t1,Model="expo",start=c(100,.1),upper=Inf,lower=0))=="list"
devtools::test()
library(ape)
t1=rcoal(20)
heterochronous.gp.stat(t1)
class(heterochronous.gp.stat(t1))
?loglik
data(village)
system.time(loglik(village,c(100,1),Model="expo",Rcpp=T))
system.time(loglik(village,c(100,1),Model="expo",Rcpp=F))
loglik(village,c(100,1),Model="expo",Rcpp=T)
class(loglik(village,c(100,1),Model="expo",Rcpp=T))
devtools::document()
devtools::test
devtools::test()
?bobyqa
?Geniefit
devtools::document()
?Geniefit
f=Geniefit(t1,Model="expo",start=c(100,.1),upper=Inf,lower=0,MCMC=T,sig=.1,run=10000)
acf(f$MCMC.simulation)
f
f[1:3]
Geniefit(t1,Model="expo",start=c(100,.1),upper=Inf,lower=0)
Geniefit(t1,Model="expo",start=c(100,.1),upper=Inf,lower=0,Rcpp=T)
devtools::document()
devtools::document()
devtools::document()
trajectory<-function(x)  exp(10*x)
sample1<-cbind(c(9,1,2,1),c(0,.008,.03,.1))
example.hetero<-coalgen.hetero(sample1, trajectory)
example.hetero
sample<-c(10,0)
example.iso<-coalgen.iso(sample, trajectory)
example.iso
?coalgen.hetero
trajectory<-function(x)  exp(10*x)
sample1<-cbind(c(9,1,2,1),c(0,.008,.03,.1))
example.hetero<-coalgen.hetero(sample1, trajectory)
example.hetero
sample<-c(10,0)
example.iso<-coalgen.iso(sample, trajectory)
example.iso
att(example.hetero)
att(x)
att(t1)
?att
att(village)
cao=att(village)
cao$t
cao$A
dd
library(genieR)
fit3=Geniefit(village,Model="log",start=c(100,.1,.1),upper=Inf,lower=0,MCMC=T)
fit3=Geniefit(village,Model="log",start=c(100,.1,.1),upper=Inf,lower=0,MCMC=T)
devtools::document()
fit3=Geniefit(village,Model="log",start=c(100,.1,.1),upper=Inf,lower=0,MCMC=T)
fit3=Geniefit(village,Model="log",start=c(100,.1,.1),upper=Inf,lower=0,MCMC=T)
fit3[1:3]
